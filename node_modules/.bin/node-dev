#! /usr/bin/env node

var spawn = require('child_process').spawn
  , fs = require('fs')
  , env = process.env
  , node = process.argv[0]
  , child

// Pass the location of the node-dev script to the child process
env.NODE_DEV = process.argv[1]

try {
  var cluster = require('cluster')
  // Re-expose the id so that child process knows about being a worker
  if (cluster.worker) env.NODE_UNIQUE_ID = cluster.worker.id
}
catch (err) {
  // The cluster module does not exist in 0.4.x
}

var args = process.argv.slice(2)
if (!args.length) {
  try {
    var json = JSON.parse(fs.readFileSync('./package.json', 'utf8'))
    if (!json.main) {
      console.log('Error: package.json does not specify a "main" script.')
      throw new Error()
    }
    args.push(json.main)
  }
  catch (err) {
    console.log('Usage: node-dev [options] script [arguments]\n')
    process.exit(1)
  }
}

// Find the first arg that is not an option
for (var i=0; i < args.length; i++) {
  if (!/^-/.test(args[i])) {
    args.splice(i, 0, __dirname + '/wrapper.js')
    break
  }
}

// Relay IPC messages
process.on('message', function(m) {
  if (child && child.send) child.send(m)
})

function start() {
  child = spawn(node, args, {
    cwd: process.cwd(),
    env: env,
    customFds: [0, 1, 2],
    stdio: [0, 1, 2, 'ipc']
  })
  .on('message', function(m) {
    if (process.send) process.send(m)
  })
  .on('exit', function(code) {
    if (code === 101) process.nextTick(start)
    else process.exit(code)
  })
}

start()
