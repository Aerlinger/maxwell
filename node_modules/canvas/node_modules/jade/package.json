{
  "name": "jade",
  "description": "Jade template engine",
  "version": "0.11.0",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/visionmedia/jade"
  },
  "main": "./index.js",
  "bin": {
    "jade": "./bin/jade"
  },
  "engines": {
    "node": ">= 0.1.98"
  },
  "readme": "\n# Jade - template engine\n\n Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)\n and implemented with JavaScript for [node](http://nodejs.org).\n\n## Features\n\n  - client-side support\n  - great readability\n  - flexible indentation\n  - block-expansion\n  - code is escaped by default for security\n  - contextual error reporting at compile &amp; run time\n  - executable for compiling jade templates via the command line\n  - html 5 mode (using the _!!! 5_ doctype)\n  - optional memory caching\n  - combine dynamic and static tag classes\n  - parse tree manipulation via _filters_\n  - supports [Express JS](http://expressjs.com) out of the box\n  - transparent iteration over objects, arrays, and even non-enumerables via `- each`\n  - block comments\n  - no tag prefix\n  - AST filters\n  - filters\n    - :sass must have [sass.js](http://github.com/visionmedia/sass.js) installed\n    - :less must have [less.js](http://github.com/cloudhead/less.js) installed\n    - :markdown must have [markdown-js](http://github.com/evilstreak/markdown-js) installed or [node-discount](http://github.com/visionmedia/node-discount)\n    - :cdata\n    - :coffeescript must have [coffee-script](http://jashkenas.github.com/coffee-script/) installed\n  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)\n  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)\n  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)\n  - [html2jade](https://github.com/donpark/html2jade) converter\n\n## Implementations\n\n  - [php](http://github.com/everzet/jade.php)\n  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)\n  - [ruby](http://github.com/stonean/slim)\n\n## Installation\n\nvia npm:\n\n    npm install jade\n\n## Browser Support\n\n To compile jade to a single file compatible for client-side use simply execute:\n \n    $ make jade.js\n\n Alternatively, if uglifyjs is installed via npm (`npm install uglify-js`) you may execute the following which will create both files.\n \n    $ make jade.min.js\n\n## Public API\n\n    var jade = require('jade');\n\n    // Render a string\n    jade.render('string of jade', { options: 'here' });\n\n    // Render a file\n    jade.renderFile('path/to/some.jade', { options: 'here' }, function(err, html){\n\t    // options are optional,\n\t    // the callback can be the second arg\n    });\n\n    // Compile a function\n    var fn = jade.compile('string of jade', options);\n    fn.call(scope, locals);\n\n### Options\n\n - `scope`     Evaluation scope (`this`)\n - `self`      Use a `self` namespace to hold the locals. _false by default_\n - `locals`    Local variable object\n - `filename`  Used in exceptions, and required by `cache`\n - `cache`     Cache intermediate JavaScript in memory keyed by `filename`\n - `debug`     Outputs tokens and function body generated\n - `compiler`  Compiler to replace jade's default\n\n## Syntax\n\n### Line Endings\n\n**CRLF** and **CR** are converted to **LF** before parsing.\n\n### Tags\n\nA tag is simply a leading word:\n\n    html\n\nfor example is converted to `<html></html>`\n\ntags can also have ids:\n\n    div#container\n\nwhich would render `<div id=\"container\"></div>`\n\nhow about some classes?\n\n    div.user-details\n\nrenders `<div class=\"user-details\"></div>`\n\nmultiple classes? _and_ an id? sure:\n\n    div#foo.bar.baz\n\nrenders `<div id=\"foo\" class=\"bar baz\"></div>`\n\ndiv div div sure is annoying, how about:\n\n    #foo\n    .bar\n\nwhich is syntactic sugar for what we have already been doing, and outputs:\n\n    `<div id=\"foo\"></div><div class=\"bar\"></div>`\n\n### Tag Text\n\nSimply place some content after the tag:\n\n    p wahoo!\n\nrenders `<p>wahoo!</p>`.\n\nwell cool, but how about large bodies of text:\n\n    p\n      | foo bar baz\n      | rawr rawr\n      | super cool\n      | go jade go\n\nrenders `<p>foo bar baz rawr.....</p>`\n\ninterpolation? yup! both types of text can utilize interpolation,\nif we passed `{ locals: { name: 'tj', email: 'tj@vision-media.ca' }}` to `render()`\nwe can do the following:\n\n    #user #{name} &lt;#{email}&gt;\n\noutputs `<div id=\"user\">tj &lt;tj@vision-media.ca&gt;</div>`\n\nActually want `#{}` for some reason? escape it!\n\n    p \\#{something}\n\nnow we have `<p>#{something}</p>`\n\nWe can also utilize the unescaped variant `!{html}`, so the following\nwill result in a literal script tag:\n\n    - var html = \"<script></script>\"\n    | !{html}\n\nNested tags that also contain text can optionally use a text block:\n\n    label\n      | Username:\n      input(name='user[name]')\n\nor immediate tag text:\n\n    label Username:\n      input(name='user[name]')\n\nTags that accept _only_ text such as `script`, `style`, and `textarea` do not\nneed the leading `|` character, for example:\n\n      html\n        head\n          title Example\n          script\n            if (foo) {\n              bar();\n            } else {\n              baz();\n            }\n\nOnce again as an alternative, we may use a leading '.' to indicate a text block, for example:\n\n      p.\n        foo asdf\n        asdf\n         asdfasdfaf\n         asdf\n        asd.\n\noutputs:\n\n        <p>foo asdf\n        asdf\n          asdfasdfaf\n          asdf\n        asd\n        .\n        </p>\n\nThis however differs from a leading '.' followed by a space, which although is ignored by the Jade parser, tells Jade that this period is a literal:\n\n    p .\n    \noutputs:\n\n    <p>.</p>\n\n### Comments\n\nSingle line comments currently look the same as JavaScript comments,\naka \"//\" and must be placed on their own line:\n\n    // just some paragraphs\n    p foo\n    p bar\n\nwould output\n\n    <!-- just some paragraphs -->\n    <p>foo</p>\n    <p>bar</p>\n\nJade also supports unbuffered comments, by simply adding a hyphen:\n\n    //- will not output within markup\n    p foo\n    p bar\n\noutputting\n\n    <p>foo</p>\n    <p>bar</p>\n\n### Block Comments\n\n A block comment is legal as well:\n\n      body\n        //\n          #content\n            h1 Example\n\noutputting\n\n    <body>\n      <!--\n      <div id=\"content\">\n        <h1>Example</h1>\n      </div>\n      -->\n    </body>\n\nJade supports conditional-comments as well, for example:\n\n    body\n      /if IE\n        a(href='http://www.mozilla.com/en-US/firefox/') Get Firefox\n\noutputs:\n\n    <body>\n      <!--[if IE]>\n        <a href=\"http://www.mozilla.com/en-US/firefox/\">Get Firefox</a>\n      <![endif]-->\n    </body>\n\n\n### Nesting\n\n Jade supports nesting to define the tags in a natural way:\n\n    ul\n      li.first\n        a(href='#') foo\n      li\n        a(href='#') bar\n      li.last\n        a(href='#') baz\n\n### Block Expansion\n\n Block expansion allows you to create terse single-line nested tags,\n the following example is equivalent to the nesting example above.\n\n      ul\n        li.first: a(href='#') foo\n        li: a(href='#') bar\n        li.last: a(href='#') baz\n\n\n### Attributes\n\nJade currently supports '(' and ')' as attribute delimiters.\n\n    a(href='/login', title='View login page') Login\n\nAlternatively we may use the colon to separate pairs:\n\n    a(href: '/login', title: 'View login page') Login\n\nBoolean attributes are also supported:\n\n    input(type=\"checkbox\", checked)\n\nBoolean attributes with code will only output the attribute when `true`:\n\n\tinput(type=\"checkbox\", checked: someValue)\n    \nMultiple lines work too:\n\n    input(type='checkbox',\n      name='agreement',\n      checked)\n\n### Doctypes\n\nTo add a doctype simply use `!!!` followed by an optional value:\n\n    !!!\n\nWill output the _transitional_ doctype, however:\n\n    !!! 5\n\nWill output html 5's doctype. Below are the doctypes\ndefined by default, which can easily be extended:\n    var doctypes = exports.doctypes = {\n\t    '5': '<!DOCTYPE html>',\n\t    'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\n\t    'default': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\n\t    'transitional': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\n\t    'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\n\t    'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',\n\t    '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\n\t    'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',\n\t    'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\n\t};\n\nTo alter the default simply change:\n\n    jade.doctypes.default = 'whatever you want';\n\n## Filters\n\nFilters are prefixed with `:`, for example `:markdown` and\npass the following block of text to an arbitrary function for processing. View the _features_\nat the top of this document for available filters.\n\n    body\n      :markdown\n        Woah! jade _and_ markdown, very **cool**\n        we can even link to [stuff](http://google.com)\n\nRenders:\n\n       <body><p>Woah! jade <em>and</em> markdown, very <strong>cool</strong> we can even link to <a href=\"http://google.com\">stuff</a></p></body>\n\nFilters may also manipulate the parse tree. For example perhaps I want to\nbake conditionals right into jade, we could do so with a filter named _conditionals_. Typically filters work on text blocks, however by passing a regular block our filter can do anything it wants with the tags nested within it.\n\n    body\n      conditionals:\n        if role == 'admin'\n          p You are amazing\n        else\n          p Not so amazing\n\nNot that we no longer prefix with \"-\" for these code blocks. Examples of \nhow to manipulate the parse tree can be found at _./examples/conditionals.js_ and _./examples/model.js_, basically we subclass and re-implement visitor methods as needed. There are several interesting use-cases for this functionality above what was shown above such as transparently aggregating / compressing assets to reduce the number of HTTP requests, transparent record error reporting, and more.\n\n## Code\n\nJade currently supports three classifications of executable code. The first\nis prefixed by `-`, and is not buffered:\n\n    - var foo = 'bar';\n\nThis can be used for conditionals, or iteration:\n\n    - for (var key in obj)\n      p= obj[key]\n\nDue to Jade's buffering techniques the following is valid as well:\n\n    - if (foo)\n      ul\n        li yay\n        li foo\n        li worked\n    - else\n      p oh no! didnt work\n\nHell, even verbose iteration:\n\n    - if (items.length)\n      ul\n        - items.forEach(function(item){\n          li= item\n        - })\n\nAnything you want!\n\nNext up we have _escaped_ buffered code, which is used to\nbuffer a return value, which is prefixed by `=`:\n\n    - var foo = 'bar'\n    = foo\n    h1= foo\n\nWhich outputs `bar<h1>bar<h1/>`. Code buffered by `=` is escaped \nby default for security, however to output unescaped return values\nyou may use `!=`:\n\n    p!= aVarContainingMoreHTML\n\nThe on exception made in terms of allowing \"vanilla\" JavaScript, is\nthe `- each` token. This takes the form of:\n\n    - each VAL[, KEY] in OBJ\n\nAn example iterating over an array:\n\n    - var items = [\"one\", \"two\", \"three\"]\n    - each item in items\n      li= item\n\noutputs:\n\n    <li>one</li>\n    <li>two</li>\n    <li>three</li>\n\niterating an object's keys and values:\n\n    - var obj = { foo: 'bar' }\n    - each val, key in obj\n      li #{key}: #{val}\n\nwould output `<li>foo: bar</li>`\n\nYou can also nest these!\n\n    - each user in users\n      - each role in user.roles\n        li= role\n\nWhen a property is undefined, Jade will output an empty string. For example:\n\n    textarea= user.signature\n\nwhen undefined would normally output \"undefined\" in your html, however recent\nversions of Jade will simply render:\n\n    <textarea></textarea>\n\n## bin/jade\n\nOutput html to _stdout_:\n\n    jade examples/*.jade --pipe\n\nGenerate _examples/*.html_:\n\n    jade examples/*.jade\n\nPass options:\n\n    jade examples/layout.jade --options '{ locals: { title: \"foo\" }}'\n\nUsage info:\n\n\t\u001bUsage: jade [options] <path ...>\n\n\t\u001bOptions:\n\t  -o, --options STR   JavaScript options object passed\n\t  -p, --pipe          Output to stdout instead of PATH.html\n\t  -h, --help          Output help information\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2009-2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "_id": "jade@0.11.0",
  "dist": {
    "shasum": "cc5751df5f712f1a4ccae69b7f47f65f5bbaf77f"
  },
  "_from": "jade@0.11.0"
}
