{
  "name": "file",
  "description": "Higher level path and file manipulation functions.",
  "tags": [
    "file",
    "path",
    "fs",
    "walk"
  ],
  "version": "0.2.1",
  "author": {
    "name": "Anders Conbere",
    "email": "aconbere@gmail.com"
  },
  "directories": {
    "lib": "lib"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/aconbere/node-file-utils.git"
  },
  "bugs": {
    "url": "http://github.com/aconbere/node-file-utils"
  },
  "main": "./lib/file",
  "readme": "# File - Common higher level file and path operations\n\n## Install\n\n<pre>\n  npm install file\n</pre>\n\n<pre>\n  var file = require(\"file\");\n</pre>\n\n## API\n\n### file.walk(start, callback)\n\nNavigates a file tree, calling callback for each directory, passing in (null, dirPath, dirs, files).\n\n\n### file.walkSync(start, callback)\n\nLike file.walk but synchronous.\n\n\n### file.mkdirs(path, mode, callback)\n\nMakes all the directories in a path. (analgous to mkdir -P) For example given a path like \"test/this/path\" in an empty directory, mkdirs would make the directories \"test\", \"this\" and \"path\".\n\n\n### file.mkdirsSync(path, mode)\n\nLike file.mkdirs but synchronous.\n\n\n### file.path.abspath(path)\n\nExpands \".\", \"..\", \"~\" and non root paths to their full absolute path. Relative paths default to being children of the current working directory.\n\n\n### file.path.relpath(root, fullPath)\n\nGiven a root path, and a fullPath attempts to diff between the two to give us an acurate path relative to root.\n\n\n### file.path.join(head, tail)\n\nJust like path.join but haves a little more sanely when give a head equal to \"\". file.path.join(\"\", \"tail\") returns \"tail\", path.join(\"\", \"tail\") returns \"/tail\"\n",
  "readmeFilename": "README.md",
  "_id": "file@0.2.1",
  "_from": "file@>= 0.1.0"
}
