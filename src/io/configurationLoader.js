// Generated by CoffeeScript 1.4.0
(function() {

  ({
    /*
    Configures interface from JSON file
    */

    this.configureInterface: function(Circuit, retry) {
      ({
        this.createFromJSON: function(circuitFileName, Context, onComplete) {
          if (Context == null) {
            Context = null;
          }
          if (onComplete == null) {
            onComplete = null;
          }
          return $.getJSON(circuitFileName, function(jsonParsed) {
            var circuit, circuitParams, elementData, flags, newCircuitElm, params, sym, type, x1, x2, y1, y2, _i, _len;
            circuit = new Circuit(Context);
            circuitParams = jsonParsed.shift();
            circuit.Params = new CircuitEngineParams(circuitParams);
            for (_i = 0, _len = jsonParsed.length; _i < _len; _i++) {
              elementData = jsonParsed[_i];
              type = elementData['sym'];
              sym = ComponentRegistry.ComponentDefs[type];
              x1 = parseInt(elementData['x1']);
              y1 = parseInt(elementData['y1']);
              x2 = parseInt(elementData['x2']);
              y2 = parseInt(elementData['y2']);
              flags = parseInt(elementData['flags']);
              params = elementData['params'];
              if (type === 'Hint') {
                console.log("Hint found in file!");
              }
              if (type === 'Oscilloscope') {
                console.log("Scope found in file!");
              }
              try {
                if (!type) {
                  circuit.warn("Unrecognized Type");
                }
                if (!sym) {
                  circuit.warn("Unrecognized dump type: " + type);
                } else {
                  newCircuitElm = new sym(x1, y1, x2, y2, flags, params);
                  circuit.solder(newCircuitElm);
                }
              } catch (e) {
                circuit.halt(e.message);
              }
            }
            return onComplete(circuit);
          });
        }
      });
    }
  });

}).call(this);
