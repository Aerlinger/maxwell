// Generated by CoffeeScript 1.4.0
(function() {

  define([], function() {
    var Inductor;
    Inductor = function() {
      this.nodes = new Array(2);
      this.flags = 0;
      this.inductance = 0;
      this.compResistance = 0;
      this.current = 0;
      return this.curSourceValue = 0;
    };
    Inductor.FLAG_BACK_EULER = 2;
    Inductor.prototype.setup = function(ic, cr, f) {
      this.inductance = ic;
      this.current = cr;
      return this.flags = f;
    };
    Inductor.prototype.isTrapezoidal = function() {
      return (this.flags & Inductor.FLAG_BACK_EULER) === 0;
    };
    Inductor.prototype.reset = function() {
      return this.current = 0;
    };
    Inductor.prototype.stamp = function(n0, n1) {
      this.nodes[0] = n0;
      this.nodes[1] = n1;
      if (this.isTrapezoidal()) {
        this.compResistance = 2 * this.inductance / Circuit.timeStep;
      } else {
        this.compResistance = this.inductance / Circuit.timeStep;
      }
      Circuit.stampResistor(this.nodes[0], this.nodes[1], this.compResistance);
      Circuit.stampRightSide(this.nodes[0]);
      return Circuit.stampRightSide(this.nodes[1]);
    };
    Inductor.prototype.nonLinear = function() {
      return false;
    };
    Inductor.prototype.startIteration = function(voltdiff) {
      if (this.isTrapezoidal()) {
        return this.curSourceValue = voltdiff / this.compResistance + this.current;
      } else {
        return this.curSourceValue = this.current;
      }
    };
    Inductor.prototype.calculateCurrent = function(voltdiff) {
      if (this.compResistance > 0) {
        this.current = voltdiff / this.compResistance + this.curSourceValue;
      }
      return this.current;
    };
    return Inductor.prototype.doStep = function(voltdiff) {
      return Circuit.stampCurrentSource(this.nodes[0], this.nodes[1], this.curSourceValue);
    };
  });

}).call(this);
