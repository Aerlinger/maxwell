// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['cs!Settings', 'cs!DrawHelper', 'cs!Polygon', 'cs!Rectangle', 'cs!Point', 'cs!CircuitComponent', 'cs!Units'], function(Settings, DrawHelper, Polygon, Rectangle, Point, CircuitComponent, Units) {
    var SparkGapElm;
    SparkGapElm = (function(_super) {

      __extends(SparkGapElm, _super);

      function SparkGapElm(xa, ya, xb, yb, f, st) {
        SparkGapElm.__super__.constructor.call(this, xa, ya, xb, yb, f);
        this.resistance = 0;
        this.offresistance = 1e9;
        this.onresistance = 1e3;
        this.breakdown = 1e3;
        this.holdcurrent = 0.001;
        this.state = false;
        if (st) {
          if (typeof st === "string") {
            st = st.split(" ");
          }
          if (st) {
            this.onresistance = parseFloat(st.shift());
          }
          if (st) {
            this.offresistance = parseFloat(st.shift());
          }
          if (st) {
            this.breakdown = parseFloat(st.shift());
          }
          if (st) {
            this.holdcurrent = parseFloat(st.shift());
          }
        }
      }

      SparkGapElm.prototype.nonLinear = function() {
        return true;
      };

      SparkGapElm.prototype.getDumpType = function() {
        return 187;
      };

      SparkGapElm.prototype.dump = function() {
        return CircuitComponent.prototype.dump.call(this) + " " + this.onresistance + " " + this.offresistance + " " + this.breakdown + " " + this.holdcurrent;
      };

      SparkGapElm.prototype.setPoints = function() {
        var alen, dist, p1;
        CircuitComponent.prototype.setPoints.call(this);
        dist = 16;
        alen = 8;
        this.calcLeads(dist + alen);
        p1 = DrawHelper.interpPoint(this.point1, this.point2, (this.dn - alen) / (2 * this.dn));
        this.arrow1 = DrawHelper.calcArrow(this.point1, p1, alen, alen);
        p1 = DrawHelper.interpPoint(this.point1, this.point2, (this.dn + alen) / (2 * this.dn));
        return this.arrow2 = DrawHelper.calcArrow(this.point2, p1, alen, alen);
      };

      SparkGapElm.prototype.draw = function(renderContext) {
        var color, v1, v2;
        v1 = this.volts[0];
        v2 = this.volts[1];
        this.setBboxPt(this.point1, this.point2, 8);
        this.draw2Leads();
        this.setPowerColor(true);
        color = this.setVoltageColor(this.volts[0]);
        CircuitComponent.drawThickPolygonP(this.arrow1, color);
        color = this.setVoltageColor(this.volts[1]);
        CircuitComponent.drawThickPolygonP(this.arrow2, color);
        if (this.state) {
          this.doDots();
        }
        return this.drawPosts();
      };

      SparkGapElm.prototype.calculateCurrent = function() {
        var vd;
        vd = this.volts[0] - this.volts[1];
        return this.current = vd / this.resistance;
      };

      SparkGapElm.prototype.reset = function() {
        CircuitComponent.prototype.reset.call(this);
        return this.state = false;
      };

      SparkGapElm.prototype.startIteration = function() {
        var vd;
        if (Math.abs(this.current) < this.holdcurrent) {
          this.state = false;
        }
        vd = this.volts[0] - this.volts[1];
        if (Math.abs(vd) > this.breakdown) {
          return this.state = true;
        }
      };

      SparkGapElm.prototype.doStep = function() {
        this.resistance = (this.state ? this.onresistance : this.offresistance);
        return Circuit.stampResistor(this.nodes[0], this.nodes[1], this.resistance);
      };

      SparkGapElm.prototype.stamp = function() {
        Circuit.stampNonLinear(this.nodes[0]);
        return Circuit.stampNonLinear(this.nodes[1]);
      };

      SparkGapElm.prototype.getInfo = function(arr) {
        arr[0] = "spark gap";
        this.getBasicInfo(arr);
        arr[3] = (this.state ? "on" : "off");
        arr[4] = "Ron = " + CircuitComponent.getUnitText(this.onresistance, Circuit.ohmString);
        arr[5] = "Roff = " + CircuitComponent.getUnitText(this.offresistance, Circuit.ohmString);
        return arr[6] = "Vbreakdown = " + CircuitComponent.getUnitText(this.breakdown, "V");
      };

      SparkGapElm.prototype.getEditInfo = function(n) {
        if (n === 0) {
          return new EditInfo("On resistance (ohms)", this.onresistance, 0, 0);
        }
        if (n === 1) {
          return new EditInfo("Off resistance (ohms)", this.offresistance, 0, 0);
        }
        if (n === 2) {
          return new EditInfo("Breakdown voltage", this.breakdown, 0, 0);
        }
        if (n === 3) {
          return new EditInfo("Holding current (A)", this.holdcurrent, 0, 0);
        }
        return null;
      };

      SparkGapElm.prototype.getEditInfo = function(n, ei) {
        var breakdown, holdcurrent, offresistance, onresistance;
        if (ei.value > 0 && n === 0) {
          onresistance = ei.value;
        }
        if (ei.value > 0 && n === 1) {
          offresistance = ei.value;
        }
        if (ei.value > 0 && n === 2) {
          breakdown = ei.value;
        }
        if (ei.value > 0 && n === 3) {
          return holdcurrent = ei.value;
        }
      };

      SparkGapElm.prototype.needsShortcut = function() {
        return false;
      };

      return SparkGapElm;

    })(CircuitComponent);
    return SparkGapElm;
  });

}).call(this);
