// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['cs!CanvasContext', 'cs!Observer', 'cs!Circuit'], function(CanvasContext, Observer, Circuit) {
    var CircuitRenderer;
    CircuitRenderer = (function(_super) {

      __extends(CircuitRenderer, _super);

      function CircuitRenderer(Circuit, CanvasDomElm) {
        this.Circuit = Circuit;
        this.repaint = __bind(this.repaint, this);

        if (CanvasDomElm) {
          this.Context = new CanvasContext(CanvasDomElm);
        }
        this.Circuit.addObserver(Circuit.ON_START_UPDATE, this.clear);
        this.Circuit.addObserver(Circuit.ON_RESET, this.clear);
        this.Circuit.addObserver(Circuit.ON_END_UPDATE, this.repaint);
      }

      CircuitRenderer.prototype.drawComponents = function() {
        var component, _i, _len, _ref, _results;
        if (this.Context) {
          _ref = this.Circuit.getElements();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            component = _ref[_i];
            _results.push(this.drawComponent(component));
          }
          return _results;
        }
      };

      CircuitRenderer.prototype.drawComponent = function(component) {
        if (this.Context) {
          return component.draw(this.Context);
        }
      };

      CircuitRenderer.prototype.drawInfo = function() {
        var bottomTextOffset, ybase;
        bottomTextOffset = 100;
        return ybase = this.Circuit.getCircuitBottom - (15 * 1) - bottomTextOffset;
      };

      CircuitRenderer.prototype.drawWarning = function(context) {
        var msg, warning, _i, _len;
        msg = "";
        for (_i = 0, _len = warningStack.length; _i < _len; _i++) {
          warning = warningStack[_i];
          msg += warning + "\n";
        }
        return console.error("Simulation Warning: " + msg);
      };

      CircuitRenderer.prototype.drawError = function(context) {
        var error, msg, _i, _len;
        msg = "";
        for (_i = 0, _len = errorStack.length; _i < _len; _i++) {
          error = errorStack[_i];
          msg += error + "\n";
        }
        return console.error("Simulation Error: " + msg);
      };

      CircuitRenderer.prototype.clear = function() {
        var _ref;
        return (_ref = this.Context) != null ? _ref.clear() : void 0;
      };

      CircuitRenderer.prototype.getContext = function() {
        return this.Context;
      };

      CircuitRenderer.prototype.getCanvas = function() {
        var _ref;
        return (_ref = this.Context) != null ? _ref.getCanvas() : void 0;
      };

      CircuitRenderer.prototype.getBuffer = function() {
        var _ref;
        return (_ref = this.Context) != null ? _ref.getCanvas().toBuffer : void 0;
      };

      /*
          # Event Listeners:
      */


      CircuitRenderer.prototype.repaint = function(Circuit) {
        return this.drawComponents();
      };

      return CircuitRenderer;

    })(Observer);
    return CircuitRenderer;
  });

}).call(this);
