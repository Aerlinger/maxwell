// Generated by CoffeeScript 1.4.0
(function() {

  define(['cs!Settings', 'jquery'], function(Settings, $) {
    var CanvasContext;
    CanvasContext = (function() {

      function CanvasContext(Canvas, width, height) {
        var _ref;
        this.Canvas = Canvas;
        this.width = width != null ? width : 600;
        this.height = height != null ? height : 400;
        this.context = (_ref = this.Canvas) != null ? typeof _ref.getContext === "function" ? _ref.getContext('2d') : void 0 : void 0;
      }

      CanvasContext.prototype.fillText = function(text, x, y) {
        if (!this.context) {
          return;
        }
        return this.context.fillText(text, x, y);
      };

      CanvasContext.prototype.fillCircle = function(x, y, radius, lineWidth, fillColor, lineColor) {
        if (lineWidth == null) {
          lineWidth = Settings.LINE_WIDTH;
        }
        if (fillColor == null) {
          fillColor = '#FF0000';
        }
        if (lineColor == null) {
          lineColor = "#000000";
        }
        if (!this.context) {
          return;
        }
        this.context.fillStyle = fillColor;
        this.context.strokeStyle = lineColor;
        this.context.beginPath();
        this.context.lineWidth = lineWidth;
        this.context.arc(x, y, radius, 0, 2 * Math.PI, true);
        this.context.stroke();
        this.context.fill();
        return this.context.closePath();
      };

      CanvasContext.prototype.drawThickLinePt = function(pa, pb, color) {
        return this.drawThickLine(pa.x, pa.y, pb.x, pb.y, color);
      };

      CanvasContext.prototype.drawThickLine = function(x, y, x2, y2, color) {
        if (color == null) {
          color = Settings.FG_COLOR;
        }
        if (!this.context) {
          return;
        }
        this.context.strokeStyle = color;
        this.context.beginPath();
        this.context.moveTo(x, y);
        this.context.lineTo(x2, y2);
        this.context.stroke();
        return this.context.closePath();
      };

      CanvasContext.prototype.drawThickPolygon = function(xlist, ylist, color) {
        var i, _i, _ref;
        for (i = _i = 0, _ref = xlist.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          this.drawThickLine(xlist[i], ylist[i], xlist[i + 1], ylist[i + 1], color);
        }
        return this.drawThickLine(xlist[i], ylist[i], xlist[0], ylist[0], color);
      };

      CanvasContext.prototype.drawThickPolygonP = function(polygon, color) {
        var i, numVertices, _i;
        numVertices = polygon.numPoints();
        for (i = _i = 0; 0 <= numVertices ? _i < numVertices : _i > numVertices; i = 0 <= numVertices ? ++_i : --_i) {
          this.drawThickLine(polygon.getX(i), polygon.getY(i), polygon.getX(i + 1), polygon.getY(i + 1), color);
        }
        return this.drawThickLine(polygon.getX(i), polygon.getY(i), polygon.getX(0), polygon.getY(0), color);
      };

      CanvasContext.prototype.clear = function() {
        if (!this.context) {
          return;
        }
        return this.context.clearRect(0, 0, this.width, this.height);
      };

      CanvasContext.prototype.getContext = function() {
        return this.context;
      };

      CanvasContext.prototype.getCanvas = function() {
        return this.Canvas;
      };

      CanvasContext.prototype.toBuffer = function() {
        var _ref;
        return (_ref = this.Canvas) != null ? _ref.toBuffer : void 0;
      };

      return CanvasContext;

    })();
    return CanvasContext;
  });

}).call(this);
