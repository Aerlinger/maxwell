// Generated by CoffeeScript 1.4.0
(function() {

  define(['cs!CircuitComponent', 'cs!ArrayUtils'], function(CircuitComponent, ArrayUtils) {
    return describe("Array Utilities", function() {
      it("should build array of zeros of length 5", function() {
        ArrayUtils.zeroArray(5).toString().should.equal([0, 0, 0, 0, 0].toString());
        it("should return an empty array for a length of -1", function() {});
        ArrayUtils.zeroArray(-1).toString().should.equal("");
        return ArrayUtils.zeroArray(0).toString().should.equal("");
      });
      it("should build an empty 2d array when numRows or numCols is < 1", function() {
        ArrayUtils.zeroArray2(1, -5).toString().should.equal("");
        ArrayUtils.zeroArray2(-1, -5).toString().should.equal("");
        ArrayUtils.zeroArray2(-1, 5).toString().should.equal("");
        return ArrayUtils.zeroArray2(0, 0).toString().should.equal("");
      });
      it("should build a 1x5 array of zeros", function() {
        return ArrayUtils.zeroArray2(1, 5).should.eql([[0, 0, 0, 0, 0]]);
      });
      it("should build a 2x5 array of zeros", function() {
        return ArrayUtils.zeroArray2(2, 5).should.eql([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]);
      });
      it("should build a 3x2 array of zeros", function() {
        var arr;
        arr = ArrayUtils.zeroArray2(3, 2);
        arr.should.eql([[0, 0], [0, 0], [0, 0]]);
        arr[0][0].should.equal(0);
        return arr[2][1].should.equal(0);
      });
      it("should be able to remove a circuit component from an array", function() {
        var circuitElm1, circuitElm2, circuitElm3, circuitList;
        circuitElm1 = new CircuitComponent(1, 2, 3, 4);
        circuitElm2 = new CircuitComponent(5, 6, 7, 8);
        circuitElm3 = new CircuitComponent(9, 10, 11, 12);
        circuitList = [circuitElm1, circuitElm2, circuitElm3, circuitElm1];
        console.log(circuitList.remove);
        return circuitList.remove(circuitElm1).should.eql([circuitElm2, circuitElm3]);
      });
      it("should be able to remove an item from an array", function() {
        [0, 1, 2, 3].remove(0).should.eql([1, 2, 3]);
        return ["one", "two", "three", "one"].remove("one").should.eql(["two", "three"]);
      });
      return describe("ArrayUtils.isClean should reject", function() {
        specify("1D arrays with NaN", function() {
          var arr;
          arr = [1, NaN, 3, 4, 5];
          return ArrayUtils.isCleanArray(arr).should.equal(false);
        });
        specify("1D arrays with Inf", function() {
          var arr;
          arr = [1, Infinity, 3, 4, 5];
          return ArrayUtils.isCleanArray(arr).should.equal(false);
        });
        specify("1D arrays with non-numeric values", function() {
          var arr;
          return arr = ['a', 2, 3, 4, 5];
        });
        specify("Nested arrays containing Infinity", function() {
          var arr;
          return arr = [[1, 2, 3, 4], [1, 2, 3, 4], [1, Infinity, 3, 4], [1, 2, 3, 4]];
        });
        return specify("Nested arrays containing NaN", function() {
          var arr;
          return arr = [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, NaN, 4], [1, 2, 3, 4]];
        });
      });
    });
  });

}).call(this);
