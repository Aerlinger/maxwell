// Generated by CoffeeScript 1.4.0
(function() {

  define(['cs!Polygon', 'cs!Rectangle', 'cs!Point'], function(Polygon, Rectangle, Point) {
    describe("Polygon", function() {
      return it("should create a triangle with 3 pairs of vertices", function() {
        var poly;
        poly = new Polygon([0, 0, 1, 1, 2, 3]);
        poly.numPoints().should.equal(3);
        poly.getX(0).should.equal(0);
        poly.getY(0).should.equal(0);
        poly.getX(2).should.equal(2);
        poly.getY(2).should.equal(3);
        poly.addVertex(3, 4);
        poly.numPoints().should.equal(4);
        poly.getX(3).should.equal(3);
        return poly.getY(3).should.equal(4);
      });
    });
    describe("Point", function() {
      it("should default to (0, 0) when no parameters are entered", function() {
        var point;
        point = new Point();
        point.x.should.equal(0);
        return point.y.should.equal(0);
      });
      it("should properly define x and y values", function() {
        var point;
        point = new Point(10, 15);
        point.x.should.equal(10);
        return point.y.should.equal(15);
      });
      return describe("Class methods", function() {
        it("should be able to instantiate an array of points at (0, 0)", function() {
          var p1;
          p1 = new Point();
          return Point.toArray(2).toString().should.equal([p1, p1].toString());
        });
        it("should compare two points correctly", function() {
          Point.comparePair(3, 5, 3, 5).should.equal(true);
          return Point.comparePair(5, 3, 5, 3).should.equal(true);
        });
        return it("two points at the same coordinates should be equal", function() {
          var point1, point2;
          point1 = new Point(3, 5);
          point2 = new Point(3, 5);
          return point1.equals(point2).should.equal(true);
        });
      });
    });
    return describe("Rectangle", function() {
      beforeEach(function() {
        return this.rect = new Rectangle(5, 6, 100, 150);
      });
      it("should properly instantiate a rectangle", function() {
        this.rect.x.should.equal(5);
        this.rect.y.should.equal(6);
        this.rect.width.should.equal(100);
        return this.rect.height.should.equal(150);
      });
      it("should equal a rectangle of the same dimension", function() {
        var congruentRect;
        congruentRect = new Rectangle(5, 6, 100, 150);
        return this.rect.equals(congruentRect).should.equal(true);
      });
      it("should not equal a rectangle of different dimension", function() {
        var congruentRect;
        congruentRect = new Rectangle(5, 6, 100, 151);
        return this.rect.equals(congruentRect).should.equal(false);
      });
      it("should not be able to detect points on its border", function() {
        this.rect.contains(5, 6).should.equal(false);
        this.rect.contains(106, 156).should.equal(false);
        return this.rect.contains(6, 6).should.equal(false);
      });
      it("should be able to detect points within its border", function() {
        this.rect.contains(100, 151).should.equal(true);
        this.rect.contains(75, 75).should.equal(true);
        return this.rect.contains(4, 6).should.equal(false);
      });
      it("should not detect intersections with other rectangles with non-intersecting borders", function() {
        var bl_intersect, br_intersect, inside_intersect, tl_intersect, tr_intersect;
        inside_intersect = new Rectangle(40, 40, 20, 20);
        tl_intersect = new Rectangle(0, 0, 4, 5);
        tr_intersect = new Rectangle(106, 4, 100, 100);
        bl_intersect = new Rectangle(0, 157, 5, 5);
        br_intersect = new Rectangle(106, 150, 4, 5);
        this.rect.intersects(inside_intersect).should.equal(true);
        this.rect.intersects(tl_intersect).should.equal(false);
        this.rect.intersects(tr_intersect).should.equal(false);
        this.rect.intersects(br_intersect).should.equal(false);
        return this.rect.intersects(bl_intersect).should.equal(false);
      });
      return it("should detect intersections with other rectangles with intersecting borders", function() {
        var bl_intersect, br_intersect, inside_intersect, tl_intersect, tr_intersect;
        inside_intersect = new Rectangle(40, 40, 20, 20);
        tl_intersect = new Rectangle(0, 0, 6, 7);
        tr_intersect = new Rectangle(104, 7, 100, 100);
        br_intersect = new Rectangle(104, 154, 5, 5);
        bl_intersect = new Rectangle(0, 155, 7, 6);
        this.rect.intersects(inside_intersect).should.equal(true);
        this.rect.intersects(tl_intersect).should.equal(true);
        this.rect.intersects(tr_intersect).should.equal(true);
        this.rect.intersects(br_intersect).should.equal(true);
        return this.rect.intersects(bl_intersect).should.equal(true);
      });
    });
  });

}).call(this);
