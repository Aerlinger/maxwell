// Generated by CoffeeScript 1.8.0
(function() {
  define(['cs!ResistorElm', 'cs!Circuit'], function(ResistorElm, Circuit) {
    return describe("Resistor", function() {
      beforeEach(function() {
        this.Circuit = new Circuit();
        return this.resistor = new ResistorElm(100, 300, 100, 200, 0, [50]);
      });
      it("has correct resistance", function() {
        return this.resistor.resistance.should.equal(50);
      });
      it("is not have any internal voltage sources", function() {
        return this.resistor.getVoltageSourceCount().should.equal(0);
      });
      it("calculates current when voltage is applied", function() {
        this.resistor.getPostCount().should.equal(2);
        return this.resistor.getInternalNodeCount().should.equal(0);
      });
      it("has correct dump type", function() {
        return this.resistor.getDumpType().should.equal("r");
      });
      it("is orphaned", function() {
        return this.resistor.orphaned().should.equal(true);
      });
      it("has correct initial position", function() {
        this.resistor.point1.x.should.eq(100);
        this.resistor.point1.y.should.eq(300);
        this.resistor.point2.x.should.eq(100);
        return this.resistor.point2.y.should.eq(200);
      });
      it("has correct initial values", function() {
        this.resistor.current.should.eq(0);
        this.resistor.curcount.should.eq(5);
        this.resistor.noDiagonal = false;
        this.resistor.dragging = false;
        return this.resistor.parentCircuit = null;
      });
      it("has correct sign (orientation)", function() {
        return this.resistor.dsign.should.eq(-1);
      });
      it("has correct dx and dy", function() {
        this.resistor.dx.should.eq(0);
        this.resistor.dy.should.eq(-100);
        return this.resistor.dn.should.eq(100);
      });
      it("has correct bounding box", function() {
        this.resistor.boundingBox.x.should.equal(100);
        this.resistor.boundingBox.y.should.equal(200);
        this.resistor.boundingBox.width.should.equal(1);
        return this.resistor.boundingBox.height.should.equal(101);
      });
      it("has correct initial position", function() {
        return this.resistor.flags.should.equal(0);
      });
      it("Has 0 voltage at its terminals", function() {
        this.resistor.getPostVoltage(0).should.equal(0);
        this.resistor.getPostVoltage(1).should.equal(0);
        return this.resistor.getVoltageDiff().should.equal(0);
      });
      it("Has 0 current at its terminals", function() {
        return this.resistor.getCurrent().should.equal(0);
      });
      it("Has 0 power", function() {
        return this.resistor.getPower().should.equal(0);
      });
      it("Has the correct number of posts", function() {
        return this.resistor.getPostCount().should.equal(2);
      });
      it("Has no internal nodes", function() {
        return this.resistor.getInternalNodeCount().should.equal(0);
      });
      return describe("after soldering to circuit", function() {
        beforeEach(function() {
          return this.Circuit.solder(this.resistor);
        });
        it("is not be orphaned", function() {
          return this.resistor.orphaned().should.equal(false);
        });
        it("should be stampable", function() {
          return this.resistor.stamp(this.Circuit.Solver.Stamper);
        });
        it("belongs to @Circuit", function() {
          return this.Circuit.getElmByIdx(0) === this.resistor;
        });
        it("belongs to @Circuit", function() {
          return this.Circuit.numElements() === 1;
        });
        it("has two unconnected nodes", function() {
          this.Circuit.updateCircuit();
          return this.Circuit.findBadNodes().should === [];
        });
        it("has two unconnected nodes", function() {
          this.Circuit.updateCircuit();
          return this.Circuit.numNodes().should === 2;
        });
        describe("then destroying the resistor", function() {
          beforeEach(function() {
            return this.resistor.destroy();
          });
          it("is orphaned", function() {
            return this.resistor.orphaned().should.equal(true);
          });
          it("no longer belongs to @Circuit", function() {
            return this.Circuit.getElmByIdx(0) === null;
          });
          return it("belongs to @Circuit", function() {
            return this.Circuit.numElements().should.equal(0);
          });
        });
        return describe("then desoldering the resistor", function() {
          beforeEach(function() {
            return this.Circuit.desolder(this.resistor);
          });
          it("is orphaned", function() {
            return this.resistor.orphaned().should.equal(true);
          });
          it("no longer belongs to @Circuit", function() {
            return this.Circuit.getElmByIdx(0) === null;
          });
          return it("belongs to @Circuit", function() {
            return this.Circuit.numElements().should.equal(0);
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=resistorTest.js.map
