// Generated by CoffeeScript 1.4.0
(function() {

  define(['cs!ResistorElm', 'cs!GroundElm', 'cs!WireElm', 'cs!VoltageElm', 'cs!Circuit'], function(ResistorElm, GroundElm, WireElm, VoltageElm, Circuit) {
    return describe("1V grounded DC Source with 1 ohm grounded resistor", function() {
      beforeEach(function() {
        this.Circuit = new Circuit();
        this.resistor = new ResistorElm(300, 100, 300, 200, 0, [50]);
        this.voltageSource = new VoltageElm(100, 100, 100, 200, 0, [50]);
        this.wire = new WireElm(100, 100, 300, 100, 0);
        this.voltageGround = new GroundElm(100, 200, 100, 250, 0);
        return this.resGround = new GroundElm(300, 200, 300, 250, 0);
      });
      it("should have correct resistance", function() {
        return this.resistor.resistance.should.equal(50);
      });
      it("should calculate current when voltage is applied", function() {
        this.resistor.getPostCount().should.equal(2);
        return this.resistor.getInternalNodeCount().should.equal(0);
      });
      it("should have correct dump type", function() {
        return this.resistor.getDumpType().should.equal("r");
      });
      it("should need a remap", function() {
        return this.Circuit.Solver.needsRemap().should.equal(true);
      });
      it("should all be orphaned", function() {
        this.wire.orphaned().should.equal(true);
        this.resGround.orphaned().should.equal(true);
        this.voltageGround.orphaned().should.equal(true);
        this.voltageSource.orphaned().should.equal(true);
        return this.resistor.orphaned().should.equal(true);
      });
      return describe("after soldering to circuit", function() {
        beforeEach(function() {
          this.Circuit.solder(this.resistor);
          this.Circuit.solder(this.voltageSource);
          this.Circuit.solder(this.wire);
          this.Circuit.solder(this.voltageGround);
          return this.Circuit.solder(this.resGround);
        });
        it("should have 5 elements", function() {
          return this.Circuit.numElements().should.equal(5);
        });
        it("should have correct elements", function() {
          return this.Circuit.getElements().should.eql([this.resistor, this.voltageSource, this.wire, this.voltageGround, this.resGround]);
        });
        it("should not be orphaned", function() {
          this.wire.orphaned().should.equal(false);
          this.resGround.orphaned().should.equal(false);
          this.voltageGround.orphaned().should.equal(false);
          this.voltageSource.orphaned().should.equal(false);
          return this.resistor.orphaned().should.equal(false);
        });
        describe("after analyzing circuit", function() {
          beforeEach(function(done) {
            return done();
          });
          it("should not need remap", function() {});
          it("should have 4 nodes", function() {});
          it("should be linear", function() {});
          return it("should have correct elements", function() {});
        });
        return describe("after updating circuit", function() {
          beforeEach(function() {});
          it("should have 5 nodes", function() {});
          return it("should not have any bad nodes", function() {});
        });
      });
    });
  });

}).call(this);
