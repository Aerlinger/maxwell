doctype
html
  head
    title="Maxwell"

    meta(http-equiv="content-type", content="text/html; charset=UTF8")

    link(rel='stylesheet', href='css/theme.css')
    link(rel="stylesheet", href='../bower_components/jquery-ui/themes/smoothness/jquery-ui.min.css')
    link(rel='stylesheet', href='../bower_components/rickshaw/rickshaw.css')
    link(rel='stylesheet', href='../bower_components/bootstrap/dist/css/bootstrap.css')

    script(type="text/javascript", src="../bower_components/dat.gui/dat.gui.js")
    script(type="text/javascript", src="../bower_components/jquery/dist/jquery.js")
    script(type="text/javascript", src="../bower_components/jquery-ui/jquery-ui.js")
    script(type="text/javascript", src="../bower_components/sketch.js/js/sketch.js")
    script(type="text/javascript", src="../bower_components/lodash/lodash.js")
    script(type="text/javascript", src="../bower_components/d3/d3.js")
    script(type='text/javascript', src='../bower_components/bootstrap/dist/js/bootstrap.js')

    script(type="text/javascript", src="../dist/maxwell.js")
    script.
      $(document).ready(function (event) {
        var circuitName = $('canvas').data('circuit');
        var circuitFileName = "../circuits/" + circuitName + ".json";

        var canvas = $('canvas.maxwell');

        if (canvas && circuitName.length !== 0) {
          new Maxwell(canvas.get(0), {circuitName: circuitFileName});
        } else {
          console.error("No circuit definition provided");
          console.error("Circuit name: ", circuitName, "circuit Filename ");
        }
      });

  body
    .col-md-1
      #sidenav
        ul.list-unstyled
          - for (var i=0; i<examples.length; ++i)
            li
              a(href= examples[i] + ".html")= examples[i]

    .col-md-11
      #container
        block body

      #content
        form#side_panel
          section
            #legend
          section
            #renderer_form.toggler
              input#area(type='radio', name='renderer', value='area', checked='checked')
              label(for='area') area
              input#bar(type='radio', name='renderer', value='bar')
              label(for='bar') bar
              input#line(type='radio', name='renderer', value='line')
              label(for='line') line
              input#scatter(type='radio', name='renderer', value='scatterplot')
              label(for='scatter') scatter
          section
            #offset_form
              label(for='stack')
                input#stack(type='radio', name='offset', value='zero', checked='checked')
                span stack
              label(for='stream')
                input#stream(type='radio', name='offset', value='wiggle')
                span stream
              label(for='pct')
                input#pct(type='radio', name='offset', value='expand')
                span pct
              label(for='value')
                input#value(type='radio', name='offset', value='value')
                span value

            #interpolation_form
              label(for='cardinal')
                input#cardinal(type='radio', name='interpolation', value='cardinal', checked='checked')
                span cardinal
              label(for='linear')
                input#linear(type='radio', name='interpolation', value='linear')
                span linear
              label(for='step')
                input#step(type='radio', name='interpolation', value='step-after')
                span step
        #chart_container
          #chart
          #timeline
          #preview
