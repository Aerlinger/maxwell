doctype
html
  head
    title="Maxwell"

    meta(http-equiv="content-type", content="text/html; charset=UTF8")

    link(rel='stylesheet', href='theme.css')
    link(rel='stylesheet', href='bower_components/rickshaw/rickshaw.css')
    //link(rel='stylesheet', href='bower_components/bootstrap/dist/css/bootstrap.css')
    link(rel="stylesheet", href="bower_components/semantic/dist/semantic.min.css")

    script(type="text/javascript", src="bower_components/dat.gui/dat.gui.js")
    script(type="text/javascript", src="bower_components/jquery/dist/jquery.js")
    script(type="text/javascript", src="bower_components/sketch.js/js/sketch.js")
    script(type="text/javascript", src="bower_components/lodash/lodash.js")
    script(type="text/javascript", src="bower_components/d3/d3.js")
    //script(type='text/javascript', src='bower_components/bootstrap/dist/js/bootstrap.js')
    script(type="text/javascript", src="bower_components/semantic/dist/semantic.min.js")

    script(type="text/javascript", src="dist/maxwell.js")



    script.
      $(document).ready(function (event) {
        var canvas = $('canvas.maxwell').get(0);
        renderer = null;

        Maxwell.createContext("#{circuit}", "../circuits/#{circuit}.json", canvas, function (circuitContext) {
          console.log(circuitContext);
          console.log("Circuit loaded! ", circuitContext.Circuit, canvas);

          var circuit = circuitContext.Circuit;

          circuitContext.onSelectionChanged = function (components) {
            componentSummary = "";

            /*
            for (var i=0; components.length; ++i) {
              component = components[i];

              componentSummary += component.toString() + "\n";
            }*/

            console.log("SELECTION CHANGED:", components);
          };

          circuitContext.onComponentHover = function(component) {
            console.log("ON HOVER:", component.toString());
          };

          circuitContext.onComponentUnhover = function (component) {
            console.log("ON UNHOVER:", component.toString());
          };

          circuitContext.onComponentClick = function (component) {
            console.log("ON CLICK:", component.getProperties());

            //$("#placeComponent").text("Selected: " + circuitContext.getSelectedComponents().toString());

            //if (circuitContext.getPlaceComponent())
              //$("#selectedComponent").text(circuitContext.getPlaceComponent());
          };

          circuitContext.onNodeHover = function(node) {
            console.log("NODE HOVER: ", node.x, node.y);
          };

          circuitContext.onNodeClick = function (node) {
            console.log("NODE CLICK: ", node.x, node.y);
          };

          renderer = circuitContext;
        });

        $('canvas.maxwell').mousemove(function(evt) {
          $("#coords").text("Cursor: (" + evt.offsetX +", " + evt.offsetY +")");
        });

        document.addEventListener("keydown", keyDownTextField, false);

        function keyDownTextField(e) {
          var keyCode = e.keyCode;
          if (keyCode == 27) {
            console.log("KEYPRESS: ESC");

            renderer.clearPlaceComponent();
            $("#selectedComponent").text("");
          }

          else if (keyCode == 82)
            console.log("KEYPRESS: r");
          else if (keyCode == 87)
            console.log("KEYPRESS: w");
          else if (keyCode == 71)
            console.log("KEYPRESS: g");
          else if (keyCode == 8)
            console.log("KEYPRESS: backspace");
          else if (keyCode == 48)
            console.log("KEYPRESS: 0");
          else if (keyCode == 49)
            console.log("KEYPRESS: 1");
          else if (keyCode == 50)
            console.log("KEYPRESS: 2");
          else if (keyCode == 51)
            console.log("KEYPRESS: 3");
          else if (keyCode == 51)
            console.log("KEYPRESS: ~");
          else if (keyCode == 37)
            console.log("KEYPRESS: LEFT");
          else if (keyCode == 38)
            console.log("KEYPRESS: UP");
          else if (keyCode == 39)
            console.log("KEYPRESS: RIGHT");
          else if (keyCode == 40)
            console.log("KEYPRESS: DOWN");
          else if (keyCode == 187)
            console.log("KEYPRESS: +");
          else if (keyCode == 189)
            console.log("KEYPRESS: -");
          else if (keyCode == 190)
            console.log("KEYPRESS: .");
          else if (keyCode == 188)
            console.log("KEYPRESS: ,");
          else if (keyCode == 220)
            console.log("KEYPRESS: \\");
          else if (keyCode == 191)
            console.log("KEYPRESS: /");
          else if (keyCode == 221)
            console.log("KEYPRESS: ]");
          else if (keyCode == 219)
            console.log("KEYPRESS: [");
          else if (keyCode == 91 || keyCode == 93)
            console.log("KEYPRESS: CMD");
          else if (keyCode == 18)
            console.log("KEYPRESS: ALT");
          else if (keyCode == 17)
            console.log("KEYPRESS: CTL");
          else if (keyCode == 16)
            console.log("KEYPRESS: SHIFT");
          else if (keyCode == 9)
            console.log("KEYPRESS: TAB");
          else if (keyCode == 32)
            console.log("KEYPRESS: SPACE");
          else
            console.log("PRESSED: " + keyCode);
        }

        components = Maxwell.Components;
        for (var i=0;  i<components.length; ++i) {
          component = components[i];
          $("#components").append("<a class='item' data-component-index='"+ i + "'>" + component.name + "</a>");
        }

        $('#components .item').click(function(evt) {
          var componentIndex = $(this).data("component-index");

          renderer.placeComponent = new Maxwell.Components[componentIndex];

          console.log(Maxwell.Components[componentIndex]);
          console.log($(this).data("component-index"));
        });

        $('#component_sidebar').sidebar('setting', 'transition', 'overlay');
        $('#component_sidebar').sidebar('setting', 'transition', 'overlay');
        $('#circuit_sidebar').sidebar('show');
        $('.ui.dropdown').dropdown();
        $('.ui.checkbox').checkbox();

        var back_canvas = $('.grid').get(0);

        var ctx = back_canvas.getContext("2d");
        ctx.fillStyle = "#000";
        ctx.globalAlpha = 0.5;
        ctx.lineWidth = 0;
        for (i=0; i<back_canvas.width; i += 8) {
          for (j=0; j<back_canvas.height; j += 8) {
            ctx.moveTo(i, j);
            ctx.fillRect(i, j, 1, 1);
          }
        }
      });

  body
    .ui.menu
      .ui.dropdown.item
        | Circuit
        i.dropdown.icon
        .menu
          a.item
            span.description ctrl + s
            | Save
          a.item
            i.folder.icon
            | Permalink
          a.item Export to SPICE
          a.item Export to JSON
      .ui.dropdown.item
        | Components
        i.dropdown.icon
        .menu
          a.item First
          a.item Second
          a.item Third
      .ui.dropdown.item
        | Sample Circuits
        i.dropdown.icon
        .menu
          a.item First
          a.item Second
          a.item Third

    div
      #circuit_sidebar.ui.sidebar.thin.left.vertical.menu.visible
        .item
          .header Circuits
          .menu
            - for (var i=0; i<circuit_names.length; ++i)
              a.item(href="/"+circuit_names[i])= circuit_names[i]

      #component_sidebar.ui.sidebar.right.vertical.menu.visible
        .item
          .header Circuits
          .menu
            - for (var i=0; i<circuit_names.length; ++i)
              a.item(href="/" + circuit_names[i])= circuit_names[i]

      #edit_sidebar.ui.bottom.sidebar.visible
        div(style="height: 200px; border: 1px solid #FF00FF; margin-left: 150px;")
          div(style="width: 100%; border: 1px solid #F00; padding: 5px;")
            a.button.mini.ui.button.green Start
            a.button.mini.ui.button.orange  Stop
            a.button.mini.ui.button.red  Reset
          p text
          p text
          p text
          p text

      .pusher
        .canvas-container(style="margin-left: 150px; width: 100%;")
          canvas.maxwell(data-circuit="#{circuit}", width="800", height="600")
          canvas.grid(width="800", height="600")
          div(style="width: 300px; border: 1px solid #00F; height: 600px; display: inline-block; position: absolute;")
            p#coords Cursor: (-, -)
            p#placeComponent
            p#selectedComponent

            form.ui.form
              h4.ui.dividing.header Simulation Settings

              .inline.field
                .ui.slider.checkbox
                  label Toggle
                  input(type="checkbox")

              .inline.field
                .ui.slider.range
                  label Simulation Speed
                  input(type="range")

              .inline.field
                .ui.slider.range
                  label Current Speed
                  input(type="range")

              .inline.field
                label Time Step
                input(type="text", placeholder="0.05")

            h4.ui.dividing.header Component List
            .ui.middle.aligned.divided.list
              - for (var i=0; i<8; ++i)
                .item
                  .right.floated.content
                    button.mini.ui.button.green Edit
                  img.ui.circuit-icon.image(src="https://placehold.it/50x50")
                  .content
                    | Element Name #{i}
                // Render component/circuit properties

