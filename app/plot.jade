extends ./layout

block header
  link(rel="stylesheet", href="/plot.css")
  link(rel="stylesheet", href="/bower_components/c3/c3.css")
  link(rel="stylesheet", href="/bower_components/dygraphs/css/dygraph.css")
  script(language="javascript", type="text/javascript", src="/bower_components/moment/moment.js")
  script(language="javascript", type="text/javascript", src="/bower_components/Flot/jquery.flot.js")
  script(language="javascript", type="text/javascript", src="/bower_components/Flot/jquery.flot.crosshair.js")
  script(language="javascript", type="text/javascript", src="/bower_components/c3/c3.js")
  script(language="javascript", type="text/javascript", src="/dygraph.js")

  script.
    function flotDemo() {
      // We use an inline data source in the example, usually data would be fetched from a server
      var data = [];
      var totalPoints = 300;

      var sin = [], cos = [];
      for (var i = 7; i < 21; i += 0.1) {
        sin.push([i, Math.sin(i)]);
        cos.push([i, Math.cos(i)]);
      }

      var frame = 0;

      function getRandomData() {
        if (data.length > 0)
          data = data.slice(1);

        // Do a random walk
        while (data.length < totalPoints) {
          var prev = data.length > 0 ? data[data.length - 1] : 50;
          var y = prev + Math.random() * 10 - 5;

          y = Math.max(Math.min(y, 100), 0);

          data.push(y);
        }

        // Zip the generated y values with the x values
        var res = [];
        for (var i = 0; i < data.length; ++i) {
          res.push([i, data[i]])
        }

        return res;
      }

      var plot = $.plot("#placeholder", [
        {data: sin, label: "Current"},
        {data: cos, label: "Voltage"}
      ], {
        series: {
          lines: {
            show: true
          }
        },
        crosshair: {
          mode: "x"
        },
        grid: {
          hoverable: true,
          autoHighlight: false
        },
        yaxis: {
          min: -1.2,
          max: 1.2
        }
      });

      function addRandomData() {
        var last_sin = sin[sin.length - 1];
        var last_cos = cos[cos.length - 1];

        last_time = last_sin[0];
        next_time = last_time + 0.1;

        sin.shift();
        cos.shift();

        sin.push([next_time, Math.sin(next_time)]);
        cos.push([next_time, Math.cos(next_time)]);

        return [
          {data: sin, label: "Current"},
          {data: cos, label: "Voltage"}
        ]
      }

      //var plotLegends = $("#placeholder .legendLabel");
      $("#placeholder .legendLabel").each(function () {
        // fix the widths so they don't jump around
        $(this).css('width', $(this).width());
      });
      var updateLegendTimeout = null;
      var latestPosition = null;


      function updateLegend() {
        updateLegendTimeout = null;
        var pos = latestPosition;
        var axes = plot.getAxes();
        if (pos.x < axes.xaxis.min || pos.x > axes.xaxis.max ||
            pos.y < axes.yaxis.min || pos.y > axes.yaxis.max) {
          return;
        }

        var i, j, dataset = plot.getData();

        for (i = 0; i < dataset.length; ++i) {
          var series = dataset[i];

          // Find the nearest points, x-wise
          for (j = 0; j < series.data.length; ++j) {
            if (series.data[j][0] > pos.x) {
              break;
            }
          }
          // Now Interpolate
          var y,
              p1 = series.data[j - 1],
              p2 = series.data[j];
          if (p1 == null) {
            y = p2[1];
          } else if (p2 == null) {
            y = p1[1];
          } else {
            y = p1[1] + (p2[1] - p1[1]) * (pos.x - p1[0]) / (p2[0] - p1[0]);
          }

          console.log(frame, i, j, dataset, y);
          $("#placeholder .legendLabel").eq(i).text("X:" + y);
        }
      }


      $("#placeholder").bind("plothover", function (event, pos, item) {
        latestPosition = pos;
        console.log("HOVER", pos);
        //updateLegend();

        /*
        if (!updateLegendTimeout) {
          updateLegendTimeout = setTimeout(updateLegend, 50);
        }
        */
      });

      var updateInterval = 30;
      function update() {
        series = addRandomData();

        plot.getOptions().xaxes[0].min = series[0][0];
        plot.getOptions().xaxes[0].max = series[series.length - 1][0];
        plot.setData(series);
        plot.setupGrid();
        //updateLegend();

        // Since the axes don't change, we don't need to call plot.setupGrid()

        if (latestPosition) {
          //console.log("LP", series[0].data[0], latestPosition);
          updateLegend();
        }
        plot.draw();

        frame += 1;

        setTimeout(update, updateInterval);


      }


      update();

      //var plotLegends = $("#placeholder .legendLabel");

      window.flotPlot = plot;
    }

    function rickshawDemo() {
      var plotter = new Plotter("chart_container");

      setInterval(function () {
        t = 2 * Math.PI * ((Date.now() % 10000) / 10000);

        plotter.addData(100 * Math.sin(t));
      }, 20);
    }

    function dygraphsDemo() {
      var data = [];
      var t = new Date();

      var i;
      for (i = 0; i <= 10; i += 0.1) {
        data.push([i, Math.random()]);
      }

      var g = new Dygraph(document.getElementById("div_g"), data,
          {
            drawPoints: true,
            showRoller: true,
            valueRange: [0.0, 1.2],
            labels: ['X', 'Random']
          });

      // It sucks that these things aren't objects, and we need to store state in window.
      window.intervalId = setInterval(function () {
        var x = i;
        var y = Math.random();

        data.shift();
        data.push([x, y]);

        g.updateOptions({'file': data});

        i += 0.1;
      }, 30);

    }

    function c3demo() {
      function seedData() {
        var xCol = ['time'];
        var voltage = ['Voltage'];
        var current = ['Current'];

        for (i=0; i<300; ++i) {
          xCol.push(i);
          voltage.push(5*Math.sin(i/20));
          current.push(Math.sin(i/40));
        }

        return [xCol, voltage, current];
      }

      var chart = c3.generate({
        bindto: '#chart',
        data: {
          x: 'time',
          //        xFormat: '%Y%m%d', // 'xFormat' can be used as custom format of 'x'
          columns: seedData(),
          axes: {
            Voltage: 'y',
            Current: 'y2'
          }
        },
        axis: {
          time: {
            type: 'index',
            format: function(d) { return d + 's'; }
          },
          y2: {
            show: true
          }
        },
        duration: 0
      });

      function addData() {
        var voltage = 5*Math.random();
        var current = Math.random();

        chart.flow({
          columns: [
            ['time', 301/100],
            ['Voltage', voltage],
            ['Current', current],
          ],
          duration: 0
        });
      }

      /*
      setTimeout(function () {

        setTimeout(function () {
          addData();
        }, 1000)
      }, 1000);
      */

      function update() {
        addData();

        setTimeout(update, 30);
      }

      //update();
      //update();
      //update();

      /*
      var updateInterval = 20;
      var i =7;

      function update() {
        addData(i);

        i += 1;

        setTimeout(update, updateInterval);
      }
      */

      window.c3chart = chart;
    }

    $(document).ready(function (event) {

      //dygraphsDemo();
      //c3demo();

      flotDemo();

      // RICKSHAW
      //rickshawDemo()

    });


block content

  .pusher
    #div_g(style="width:600px; height:300px;")

    .chart
      #chart.c3(style='max-height: 280px; position: relative;')

    #content
      .demo-container
        #placeholder.demo-placeholder


    #chart_container.draggable.ui-widget-content
      #chart.rickshaw_graph
      #legend_container
        #smoother(title="Smoothing")
      #slider
      #timeline
      #preview
