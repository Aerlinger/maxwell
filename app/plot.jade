extends ./layout

block header
  link(rel="stylesheet", href="/plot.css")
  link(rel="stylesheet", href="/bower_components/c3/c3.css")
  script(language="javascript", type="text/javascript", src="/bower_components/moment/moment.js")
  script(language="javascript", type="text/javascript", src="/bower_components/Flot/jquery.flot.js")
  script(language="javascript", type="text/javascript", src="/bower_components/c3/c3.js")

  script.
    function flotDemo() {
      // We use an inline data source in the example, usually data would be fetched from a server
      var data = [];
      var totalPoints = 300;

      function getRandomData() {
        if (data.length > 0)
          data = data.slice(1);

        // Do a random walk
        while (data.length < totalPoints) {
          var prev = data.length > 0 ? data[data.length - 1] : 50;
          var y = prev + Math.random() * 10 - 5;

          y = Math.max(Math.min(y, 100), 0);

          data.push(y);
        }

        // Zip the generated y values with the x values
        var res = [];
        for (var i = 0; i < data.length; ++i) {
          res.push([i, data[i]])
        }

        return res;
      }

      // Set up the control widget
      var updateInterval = 10;
      $("#updateInterval").val(updateInterval).change(function () {
        var v = $(this).val();

        if (v && !isNaN(+v)) {
          updateInterval = +v;
          if (updateInterval < 1) {
            updateInterval = 1;
          } else if (updateInterval > 2000) {
            updateInterval = 2000;
          }
          $(this).val("" + updateInterval);
        }
      });

      var plot = $.plot("#placeholder", [getRandomData()], {
        series: {
          shadowSize: 0	// Drawing is faster without shadows
        },
        yaxis: {
          min: 0,
          max: 100
        },
        xaxis: {
          show: false
        }
      });

      function addRandomData() {
        //var prev = plotData[plotData.length - 1];
        var prev = 50;
        var y = prev + Math.random() * 10 - 5;

        y = Math.max(Math.min(y, 100), 0);

        plotData.shift();
        plotData.push([totalPoints - 1, y]);

        return plotData;
      }

      function update() {
        series = addRandomData();

        plot.setData([series]);
        // Since the axes don't change, we don't need to call plot.setupGrid()
        plot.draw();

        console.log(series);

        //setTimeout(update, updateInterval);
      }

      var plotData = getRandomData();

      console.log(plotData);

      plot.setData([plotData]);
      plot.draw();

      update();
      update();
      update();
    }

    function rickshawDemo() {
      var plotter = new Plotter("chart_container");

      setInterval(function () {
        t = 2 * Math.PI * ((Date.now() % 10000) / 10000);

        plotter.addData(100 * Math.sin(t));
      }, 20);
    }

    function c3demo() {
      function seedData() {
        var xCol = ['time'];
        var voltage = ['Voltage'];
        var current = ['Current'];

        for (i=0; i<300; ++i) {
          xCol.push(i);
          voltage.push(5*Math.sin(i/20));
          current.push(Math.sin(i/40));
        }

        return [xCol, voltage, current];
      }

      var chart = c3.generate({
        bindto: '#chart',
        data: {
          x: 'time',
          //        xFormat: '%Y%m%d', // 'xFormat' can be used as custom format of 'x'
          columns: seedData(),
          axes: {
            Voltage: 'y',
            Current: 'y2'
          }
        },
        axis: {
          time: {
            type: 'index',
            format: function(d) { return d + 's'; }
          },
          y2: {
            show: true
          }
        },
        duration: 0
      });

      function addData() {
        var voltage = 5*Math.random();
        var current = Math.random();

        chart.flow({
          columns: [
            ['time', 301/100],
            ['Voltage', voltage],
            ['Current', current],
          ],
          duration: 0
        });
      }

      /*
      setTimeout(function () {

        setTimeout(function () {
          addData();
        }, 1000)
      }, 1000);
      */

      function update() {
        addData();

        setTimeout(update, 30);
      }

      update();
      //update();
      //update();

      /*
      var updateInterval = 20;
      var i =7;

      function update() {
        addData(i);

        i += 1;

        setTimeout(update, updateInterval);
      }
      */

      window.c3chart = chart;
    }

    $(document).ready(function (event) {

      c3demo();
      //c3demo2();

      flotDemo();

      // RICKSHAW
      rickshawDemo()

    });


block content

  .pusher
    .chart
      #chart.c3(style='max-height: 280px; position: relative;')

    #content
      .demo-container
        #placeholder.demo-placeholder
      p
        | You can update a chart periodically to get a real-time effect by using a timer to insert the new data in the plot and redraw it.
      p
        | Time between updates:
        input#updateInterval(type='text', value='', style='text-align: right; width:5em')
        |  milliseconds


    #chart_container.draggable.ui-widget-content
      #chart.rickshaw_graph
      #legend_container
        #smoother(title="Smoothing")
      #slider
      #timeline
      #preview
